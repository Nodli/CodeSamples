#define M_PI 3.14159265359

#define custom_color 1
#define custom_lambda 0
#define rotate_mode 3

const int Steps = 1000;
const float Epsilon = 0.05; // Marching epsilon
const float T=0.5;

const float rA=10.0; // Maximum ray marching or sphere tracing distance from origin
const float rB=40.0; // Minimum

// ---------- Animation functions ---------- //

float animate(float min_value, float max_value, float period, float time) {
    float x = (time / period) * 2.0 * M_PI;
    float s = (sin(x) + 1.0) / 2.0;
    return min_value + ((max_value - min_value) * s);
}

// ---------- Transforms ---------- //

vec3 rotateX(vec3 p, float a)
{
  float sa = sin(a);
  float ca = cos(a);
  return vec3(p.x, ca*p.y - sa*p.z, sa*p.y + ca*p.z);
}

vec3 rotateY(vec3 p, float a)
{
  float sa = sin(a);
  float ca = cos(a);
  return vec3(ca*p.x + sa*p.z, p.y, -sa*p.x + ca*p.z);
}

vec3 rotateZ(vec3 p, float a)
{
  float sa = sin(a);
  float ca = cos(a);
  return vec3(ca*p.x + sa*p.y, -sa*p.x + ca*p.y, p.z);
}


// Smooth falloff function
// r : small radius
// R : Large radius
float falloff( float r, float R )
{
  float x = clamp(r/R,0.0,1.0);
  float y = (1.0-x*x);
  return y*y*y;
}

// Value of the lambda aka Liptschitz constant
// e : energy associated to the primitive
// R : radius associated to the primitive
float lambda(float e, float R){
    // maximum of the falloff function derivative
    float lambda_zero = 96. / (25. * sqrt(5.));
    
    return e * lambda_zero / R;
}

// ---------- Primitive shapes --------- //

// Point skeleton
// p : point
// c : center of skeleton
// e : energy associated to skeleton
// R : large radius
float point(vec3 p, vec3 c, float e,float R)
{
  return e*falloff(length(p-c),R);
}

// Line skeleton
// p : point
// d : line direction; must be normalized
float line(vec3 p, vec3 o, vec3 d, float e, float R){
    vec3 p_on_line = o + dot(d, p - o) * d;
    return e * falloff(length(p - p_on_line), R);
}

// Segment skeleton
// p : point
// A, B : extremities of the segment
float segment(vec3 p, vec3 A, vec3 B, float e, float R){
  
  vec3 Ap = p - A;
  vec3 AB = B - A;
  float param = dot(AB, Ap) / dot(AB, AB);
  param = clamp(param, 0., 1.); // sphere is located at the extremities if not on the segment
    
  return e * falloff(length(Ap - AB * param), R); // distance to the closest point from the segment (ie sphere)
}

// Cuboid skeleton
// p : point
// min_bbox : min of the cube
// max_bbox : max of the cube
float cuboid(vec3 p, vec3 min_bbox, vec3 max_bbox, float e, float R){
    
    vec3 cube_center = (min_bbox + max_bbox) / 2.; // centering the cube
    vec3 p_cube_coord = abs(p - cube_center); // 'folding' the coordinates inside the cube with all three positive coord
    
    vec3 cube_half_size = abs(max_bbox - min_bbox) / 2.;
    
    vec3 p_to_cube_dim = p_cube_coord - cube_half_size;
    float p_to_cube_distance = max(max(p_to_cube_dim.x, p_to_cube_dim.y), p_to_cube_dim.z);
    
    return e * falloff(p_to_cube_distance, R);
}

// 'Rounded' Cuboid skeleton
// p : point
// min_bbox : min of the cube
// max_bbox : max of the cube
float rounded_cuboid(vec3 p, vec3 min_bbox, vec3 max_bbox, float e, float R){
    
    vec3 p_to_cube_dim;
    p_to_cube_dim.x = min(min(0., p.x - min_bbox.x), min(0., max_bbox.x - p.x));
    p_to_cube_dim.y = min(min(0., p.y - min_bbox.y), min(0., max_bbox.y - p.y));
    p_to_cube_dim.z = min(min(0., p.z - min_bbox.z), min(0., max_bbox.z - p.z));
    
    float p_to_cube_distance = sqrt(dot(p_to_cube_dim, p_to_cube_dim));
    
    return e * falloff(p_to_cube_distance, R);
}

// 'Rounded' Cuboid skeleton
// p : point
// d : diagonal
float rounded_cuboid_better(vec3 p, vec3 d, float e, float R){
    
    vec3 p_to_cube_dim = abs(p) - d;
    float p_to_cube_distance = length(max(p_to_cube_dim, 0.));
    
    return e * falloff(p_to_cube_distance, R);
}

// 'Rounded' Cuboid skeleton using a smooth maximum
// p : point
// min_bbox : min of the cube
// max_bbox : max of the cube
float rounded_cuboid_smooth(vec3 p, vec3 min_bbox, vec3 max_bbox, float e, float R){

    // centering the cube
    vec3 cube_center = (min_bbox + max_bbox) / 2.;
    vec3 p_cube_coord = abs(p - cube_center); // 'folding' the coordinates inside the cube with all three positive coord
    
    vec3 cube_half_size = abs(max_bbox - min_bbox) / 2.;
    
    vec3 p_to_cube_dim = p_cube_coord - cube_half_size;
    
	// Using a smooth maximum
    float smooth_max_power = 2.5;
    float p_to_cube_distance = p_to_cube_dim.x * exp(smooth_max_power * p_to_cube_dim.x)
        					+ p_to_cube_dim.y * exp(smooth_max_power * p_to_cube_dim.y)
        					+ p_to_cube_dim.z * exp(smooth_max_power * p_to_cube_dim.z);
    p_to_cube_distance /= exp(smooth_max_power * p_to_cube_dim.x)
        				+ exp(smooth_max_power * p_to_cube_dim.y)
        				+ exp(smooth_max_power * p_to_cube_dim.z);

    return e * falloff(p_to_cube_distance, R);
}

// Disc skeleton
// p : point
float disc(vec3 p, vec3 c, float r, vec3 n, float e, float R){
    

    float p_to_plane = dot(n, p - c);
    vec3 p_on_plane = p - p_to_plane * n;
    
    float p_on_plane_to_circle = max(0., length(p_on_plane - c) - r);    
    float p_to_disc_space = sqrt(p_on_plane_to_circle * p_on_plane_to_circle
                                + p_to_plane * p_to_plane);
    
    return e * falloff(p_to_disc_space, R);
}

// 'Round' Cylinder skeleton
// p: point
// A, B : extremities of the cylinder
// radius : radius of the cylinder
float round_cylinder(vec3 p, vec3 A, vec3 B, float radius, float e, float R){
    // distance to disc on A
    vec3 planeA_normal = normalize(B - A);
    float p_to_planeA = dot(planeA_normal, p - A);
    vec3 p_on_planeA = p - p_to_planeA * planeA_normal;
    float p_on_planeA_to_circle = max(0., length(p_on_planeA - A) - radius);
    
    float dist_discA = sqrt(p_on_planeA_to_circle * p_on_planeA_to_circle
                           + p_to_planeA * p_to_planeA);
    
    // distance to disc on B
    vec3 planeB_normal = normalize(A - B);
    float p_to_planeB = dot(planeB_normal, p - B);
    vec3 p_on_planeB = p - p_to_planeB * planeB_normal;
    float p_on_planeB_to_circle = max(0., length(p_on_planeB - B) - radius);
    
    float dist_discB = sqrt(p_on_planeB_to_circle * p_on_planeB_to_circle
                           + p_to_planeB * p_to_planeB);
    
    // distance to cylinder body
    vec3 Ap = p - A;
    vec3 AB = B - A;
    float body_param = dot(AB, Ap) / dot(AB, AB);
    
    float dist_body;
    if(body_param < 0. || body_param > 1.){
        dist_body = dist_discA + dist_discB;
    }else{
        dist_body = length(Ap - AB * body_param) - radius;
    }
  
    float distance_to_cylinder = min(min(dist_discA, dist_discB), dist_body);
    
    return e * falloff(distance_to_cylinder, R);
}

// Torus skeleton
// p : point
// c : center of the tore
// r : radius of the major circle of the tore ie radius of the loop on the plane
// n : normal of the circle plane; must be normalized
float torus(vec3 p, vec3 c, float r, vec3 n, float e, float R){
	
    float p_to_plane = dot(n, c - p);
    
    vec3 p_on_plane = p + p_to_plane * n;
    
    float p_to_circle_on_plane = length(p_on_plane - c) - r;
    
    float p_to_circle_in_space = sqrt(p_to_plane * p_to_plane + p_to_circle_on_plane * p_to_circle_on_plane);
    
    return e * falloff(p_to_circle_in_space, R);
}

// Elipsoid skeleton
// p : point
// c : center of the elipsoid
// aspect_ratio : (a, b, c) coefficients in the equatoin of the elipsoid (x^2 / a^2) + (y^2 / b^2) + (z^2 / c^2) = 1
float elipsoid(vec3 p, vec3 c, vec3 aspect_ratio, float e, float R){
  
    //vec3 lc = p - c; // local coord
    vec3 lc = p + c;
    
    float distance_to_elipsoid = (lc.x * lc.x) / (aspect_ratio.x * aspect_ratio.x)
        						+ (lc.y * lc.y) / (aspect_ratio.y * aspect_ratio.y)
        						+ (lc.z * lc.z) / (aspect_ratio.z * aspect_ratio.z);
    
    return e * falloff(distance_to_elipsoid, R);
}

float cone(vec3 p, float angle, float e, float R){
    float distance_to_cone = p.x * p.x + p.y * p.y - p.z * p.z * tan(angle);
    
    return e * falloff(distance_to_cone, R);
}

// ---------- Combinations ---------- //

// Blending
// a : field function of left sub-tree
// b : field function of right sub-tree
float Blend(float a,float b)
{
    return a+b;
}

// Union
// a : field function of left sub-tree
// b : field function of right sub-tree
float Union(float a,float b)
{
    return max(a,b);
}

// Intersection
// a : field function of left sub-tree
// b : field function of right sub-tree
float Intersect(float a, float b)
{
    return min(a, b);
}

// Difference
// a : field function of left sub-tree
// b : field function of right sub-tree
float Difference(float a, float b)
{
    return min(a, 2. * T - b);
}

// Difference
// a : field function of left sub-tree
// b : field function of right sub-tree
float DifferenceBlend(float a, float b)
{
    return a - b;
}

// Interpolate
// a : field function of left sub-tree
// b : field function of right sub-tree
float Interpolate(float a, float b, float speed, float min_value, float max_value){
    return mix(a, b, min_value + (max_value - min_value) * (0.5 + 0.5 * sin(speed * M_PI)));
}

// Repeat
// p : point
// c : period
// distance : signed distance function to repeat
vec3 Repeat(vec3 p, vec3 period)
{
    return mod(p, period) - 0.5 * period;
}

vec3 Twist(vec3 p, float freq){
    float cos_value = cos(freq * p.y);
    float sin_value = sin(freq * p.y);
    
    mat2  rot_matrix = mat2(cos_value, -sin_value,
                            sin_value, cos_value);
    
    return vec3(rot_matrix * p.xz, p.y);
}


// ---------- Lambda Combinations ---------- //
// Based on the rules of the addition / min / max of two derivative

// Blending
// a : field function of left sub-tree
// b : field function of right sub-tree
float lambdaBlend(float lambdaA, float lambdaB){
    return lambdaA + lambdaB;
}

// Union
// a : field function of left sub-tree
// b : field function of right sub-tree
float lambdaUnion(float lambdaA, float lambdaB){
    return max(lambdaA, lambdaB);
}

// Intersection
// a : field function of left sub-tree
// b : field function of right sub-tree
float lambdaIntersec(float lambdaA, float lambdaB){
    return max(lambdaA, lambdaB);
}

// Interpolate
// a : field function of left sub-tree
// b : field function of right sub-tree
float lambdaInterpolate(float a, float b, float speed, float min_value, float max_value){
    return mix(a, b, min_value + (max_value - min_value) * (0.5 + 0.5 * sin(speed * M_PI)));
}

// ---------- Scene objects ---------- //

float SUR_LES_ROTULES(vec3 p){
    float v = segment(p, vec3(-1., -1., -1.), vec3(1., 1., 1.), 1., 4.5);
    
    for(int i = 0; i != 300; ++i){
        v = Blend(v, point(p, vec3(0., 0., 0.), 1., 4.5));
    }
    
    return v;
}

float libellule(vec3 p){
    vec3 min_bbox = vec3(-30., -100., -5.);
    vec3 max_bbox = vec3(30., 100., 5.);
    float bounding_box = cuboid(p, min_bbox, max_bbox, 1., 1.);
    
    vec3 spatial_repeat;
    spatial_repeat.x = 4.;
    spatial_repeat.y = 4.;
    spatial_repeat.z = 6.;
    
    vec3 repeat_sphere_coord = vec3(p.x + 0.9 + cos(M_PI * iTime), p.y - 0.9 + 1.5 * iTime, p.z + 0.4 * sin(M_PI * iTime));
    float sphere_repeat = point(Repeat(repeat_sphere_coord, spatial_repeat), vec3(0., 0., 0.), 1., 4.5);
    
    vec3 unique_coord = vec3(p.x, p.y, p.z);
    float sphere_unique = point(unique_coord, vec3(0., 0., 0.), 1., 4.5);
    
    float cube_unique = rounded_cuboid_better(Repeat(unique_coord, vec3(10.5, 10.5, 0.)), vec3(4.5, 4.5, 3.), 1., 1.);
    
    float together = Interpolate(sphere_repeat, cube_unique, 0.25 * iTime, 0.3, 0.4);
    float tog = Interpolate(together, sphere_unique, 0.5 * iTime, 0.25, 2.);
    
    return Intersect(bounding_box, tog);
}

float tasse(vec3 p){
    float v = round_cylinder(p, vec3(0., -1., 0.), vec3(0., 3., 0.), 1., 1., 4.5);
	v = Blend(v, torus(p, vec3(5., 2., 0.), 2., vec3(0., 0., 1.), 1., 1.));
	v = Difference(v, round_cylinder(p, vec3(0., 0., 0.), vec3(0., 4., 0.), 0.6, 1., 4.5));
	v = Blend(v, torus(p, vec3(0., 4., 0.), 2.5, vec3(0., 1., 0.), 1., 0.5));
    
    return v;
}

float lambdaEbola(){
    float helix = lambda(1., 1.5);
    float helix_link = lambda(1., 0.5);
    float linked_double_helix = lambdaUnion(lambdaUnion(helix, helix), helix_link);
    
    float background_spheres = lambda(1., 0.75);
    float helix_spheres = lambdaUnion(linked_double_helix, background_spheres);
    
    float chromosome_arm = lambda(1., 3.5);
    float chromosome = lambdaBlend(chromosome_arm, chromosome_arm);
    
    float square_walls = lambda(1., 0.5);
    float chromosome_walls = lambdaUnion(chromosome, square_walls);
    
    float scene_lambda = lambdaUnion(linked_double_helix, chromosome_walls);
    
    return scene_lambda;
}

float Ebola(vec3 p){
    
    float time_synchro = 3. * M_PI / 2. + iTime;
    
    // Filaments ADN
    vec3 size_ratio = vec3(1.5, 3.5, 1.5);    
    vec3 spatial_repeat = vec3(12., 0., 0.);
    vec3 helix_decal = vec3(0., 0., 2.5);
    
    vec3 p_helix = p;
    p_helix.x = abs(p_helix.x);
    
    float helixA = line(Twist(rotateY(Repeat(size_ratio * p_helix + helix_decal + vec3(0.2 * sin(p.y + iTime), 0., 0.), spatial_repeat), iTime), 0.1), vec3(0., 3., 0.), vec3(0., 0., 1.), 1., 1.5);
    float helixB = line(Twist(rotateY(Repeat(size_ratio * p_helix + helix_decal + vec3(0.2 * sin(p.y + iTime), 0., 0.), spatial_repeat), iTime), 0.1), vec3(0., -3., 0.), vec3(0., 0., 1.), 1., 1.5);
    
    float linkAB = segment(Repeat(Twist(rotateY(Repeat(size_ratio * p_helix + helix_decal + vec3(0.2 * sin(p.y + iTime), 0., 0.), spatial_repeat), iTime), 0.1), vec3(0., 0., 1.)), vec3(0., 3., 0.), vec3(0., -3., 0.), 1., 0.5);
    
    float double_helix = Union(helixA, helixB);
    float linked_double_helix = Union(double_helix, linkAB);
    
    // Additional background spheres
    vec3 sphere_p = abs(Repeat(p + vec3(0., -2.5 * iTime, 0.), vec3(9., 5., 0.))) + vec3(0., 0., 0.);
    float sphere = point(sphere_p, vec3(4.5, 0., 0.), 1., 0.75);
    float helix_spheres = Union(linked_double_helix, sphere);
    
    // Chromosome
    float sin_var = max(0.05, min(0.7, (0.45 + 0.55 * sin(time_synchro))));
    float s = 2. + 50. * sin_var; // chromosome size
    vec3 as = vec3(s / 2., s, s / 2.); // chromosome aspect ratio
    
    vec3 chr_p = abs(p);
    
    float chromosomeA = elipsoid(rotateZ(chr_p - vec3(0.65 * s, s, 0.), - M_PI / 6.), vec3(0., 0., 0.), as, 1., 3.5);
    float chromosomeB = elipsoid(rotateZ(chr_p - vec3(0.65 * s, -s, 0.), M_PI / 6.), vec3(0., 0., 0.), as, 1., 3.5);
    
    float chromosomeAB = Blend(chromosomeA, chromosomeB);
    
    // Walls of squares
    vec3 wall_p = rotateX(Repeat(abs(rotateX(p, 1. - sin_var)) + vec3(-20. + 0.5 * p.z, 0., 0.), vec3(0., 5., 5.)), 1.25 * iTime);
    float square_walls = rounded_cuboid_better(wall_p, vec3(1.5, 1.5, 1.5), 1., 0.5);
    chromosomeAB = Union(chromosomeAB, square_walls);
    
    // Bounding Box / Cone Inside Chromosome
    //float box_hole_distance = cuboid(p, vec3(-100., -100., -13.), vec3(100., 100., 10.), 1., 4.5);
    float cone_hole_distance = cone(p + vec3(0., 0., 10. + 10.), -0.1 + 1.5 * sin_var, 1., 4.5);
    
	float hole_chromosome = Difference(chromosomeAB, cone_hole_distance);
    
    float inside_chromosome = Difference(helix_spheres, Difference(helix_spheres, chromosomeAB));
    
    return Union(hole_chromosome, inside_chromosome);
    //return noise_globs;
}

// ---------- Tracing functions ---------- //

// Potential field of the object
// p : point
float object(vec3 p)
{
  p.z=-p.z;
  
    // ----- Empty scene ----- //
    //float v = 0.;
    
    // ----- Examples of primitives ----- //
	//float v = point(p, vec3(0.0, 0.0, 0.0), 1.0, 15.5);
	//float v = segment(p, vec3(-5.f, -5.f, -5.f), vec3(5.f, 5.f, 5.f), 1.0, 10.5);
    //float v = round_cylinder(p, vec3(-5.f, -5.f, -5.f), vec3(5.f, 5.f, 5.f), 2., 1.0, 4.5);
    //float v = disc(p, vec3(0., 0., 0.), 6., normalize(vec3(-1., 1., 0.)), 1., 4.5);
    //float v = torus(p, vec3(0., 0., 0.), 3., normalize(vec3(1., 0., 0.)), 1., 3.5);
    //float v = cuboid(p, vec3(-1., -1., -1.), vec3(1., 1., 1.), 1., 4.5);
    //float v = rounded_cuboid(p, vec3(-1., -1., -1.), vec3(1., 1., 1.), 1., 4.5);
    //float v = rounded_cuboid_smooth(p, vec3(-1., -1., -1.), vec3(1., 1., 1.), 1., 7.5);
    //float v = line(p, vec3(0., 0., 0.), normalize(vec3(0., 1., 0.)), 1., 4.5);
    //float v = elipsoid(p, vec3(0., 0., 0.), vec3(1., 1., 1.), 1., 4.5);
    //float v = cone(p, 0.3, 1., 4.5);
    
    //float v = Interpolate(v1, v2, iTime, 0., 1.);
    
    // ----- Scenes with combinations of primitives ----- //
    //float v = SUR_LES_ROTULES(p);
    //float v = libellule(p);
    float v = Ebola(p);
    //float v = tasse(p);
    
  return v-T;
}

// Value of the lambda Lipschitz constant
// according to the primitives inside object(vec3)
float objectLambda(){
    
    #if custom_lambda == 1
    return lambdaEbola();
    #endif
    
    #if custom_lambda == 0
    return 2.; // default value - less accurate but very often more efficient
    #endif
}

// Calculate object normal
// p : point
vec3 ObjectNormal(in vec3 p )
{
  float eps = 0.0001;
  vec3 n;
  float v = object(p);
  n.x = object( vec3(p.x+eps, p.y, p.z) ) - v;
  n.y = object( vec3(p.x, p.y+eps, p.z) ) - v;
  n.z = object( vec3(p.x, p.y, p.z+eps) ) - v;
  return normalize(n);
}

// Trace ray using ray marching
// o : ray origin
// u : ray direction
// h : hit
// s : Number of steps
float Trace(vec3 o, vec3 u, out bool h,out int s)
{
  h = false;

    // Don't start at the origin, instead move a little bit forward
    float t=rA;

  for(int i=0; i<Steps; i++)
  {
    s=i;
    vec3 p = o+t*u;
    float v = object(p);
    // Hit object
      if (v > 0.0)
      {
          s=i;
          h = true;
          break;
      }
      // Move along ray
      t += Epsilon;
      // Escape marched far away
      if (t>rB)
      {
          break;
      }
  }
  return t;
}

// Trace ray using sphere tracing
// o : ray origin
// u : ray direction
// h : hit
// s : Number of steps
float SphereTrace(vec3 o, vec3 u, out bool h,out int s)
{
  h = false;

    // Don't start at the origin, instead move a little bit forward
    float t=rA;
    
    // Lipschitz constant    
    float lambda_value = objectLambda();

  for(int i=0; i<Steps; i++)
  {
    s=i;
    vec3 p = o+t*u;
    float v = object(p);

    // Hit object
      if (v > 0.0)
      {
          s=i;
          h = true;
          break;
      }
      // Move along ray
      t += max(Epsilon,abs(v)/lambda_value);
      // Escape marched far away
      if (t>rB)
      {
          break;
      }
  }
  return t;
}

// Trace ray using enhanced sphere tracing
// o : ray origin
// u : ray direction
// h : hit
// s : Number of steps
// omega : over-relaxation parameter; in [1; 2[
float EnhancedSphereTrace(vec3 o, vec3 u, out bool h, out int s, float omega)
{
  h = false;
    
    // makes sure the enhanced test won't fail at first iteration
    float step_length = 0.;
    float previous_sphere_radius = 0.;
    
    // Don't start at the origin, instead move a little bit forward
    float t=rA; // step distance
    
    // Lipschitz constant
    float lambda_value = objectLambda();

  for(int i=0; i<Steps; i++)
  {
    s=i;
    vec3 p = o+t*u;
    float v = object(p);
      
    // Hit object
      if (v > 0.0)
      {
          s=i;
          h = true;
          break;
      }
      
      // Move along ray
      float sphere_radius = max(Epsilon,abs(v)/lambda_value);
      
      bool enhanced_fail = ((omega > 1.) && ((previous_sphere_radius + sphere_radius) < step_length));
      
      if(enhanced_fail){
          step_length -= omega * step_length; // back to previous position
          omega = 1.; // disabling enhanced sphere tracing
      }else{
          step_length = omega * sphere_radius;
      }
      
      previous_sphere_radius = sphere_radius;
      t += step_length;
      
      
      // Escape marched far away
      if (t>rB)
      {
          break;
      }
  }
  return t;
}

// Background color
vec3 background(vec3 rd)
{

  #if custom_color == 0
  return mix(vec3(0.4, 0.3, 0.0), vec3(0.7, 0.8, 1.0), rd.y*0.5+0.5);
  #endif
    
  #if custom_color == 1
  float time_synchro = 3. * M_PI / 2. + iTime;
  float sin_var = max(0.05, min(1., (0.45 + 0.55 * sin(time_synchro))));  
  return mix(vec3(1. - sin_var + 0. - sin_var, 0., 0.), vec3(0.5 + 1. - sin_var, 0.5, 0.5), rd.y*0.5+0.5);
  #endif

}

// Shading and lighting
// p : point,
// n : normal at point
vec3 Shade(vec3 p, vec3 n)
{  
  // point light
  const vec3 lightPos = vec3(5.0, 5.0, 5.0);
 
  #if custom_color == 0
  vec3 lightColor = vec3(0.5, 0.5, 0.5);
  #endif
    
  #if custom_color == 1
  float time_synchro = 3. * M_PI / 2. + iTime;
  float sin_var = max(0.05, min(1., (0.45 + 0.55 * sin(time_synchro))));  
  vec3 lightColor = vec3(0.5 + sin_var, 0.5 + sin_var, 0.5 + sin_var);
  #endif

  vec3 c = 0.25*background(n);
  vec3 l = normalize(lightPos - p);

  // Not even Phong shading, use weighted cosine instead for smooth transitions
  float diff = 0.5*(1.0+dot(n, l));

  c += diff*lightColor;

  return c;
}

// Shading with number of steps
vec3 ShadeSteps(int n)
{
   float t=float(n)/(float(Steps-1));
   //return vec3(t,0.25+0.75*t,0.5-0.5*t);
    
   float time_synchro = 3. * M_PI / 2. + iTime;
   float sin_var = max(0.5, min(0.8, (0.45 + 0.55 * sin(time_synchro))));
   return vec3(sin_var * 5. * t,
               sin_var * 5. * t,
               sin_var * 5. * t);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
  vec2 pixel = (gl_FragCoord.xy / iResolution.xy)*2.0-1.0;

  // compute ray origin and direction
  float asp = iResolution.x / iResolution.y;
  vec3 rd = normalize(vec3(asp*pixel.x, pixel.y, -1.0));
  vec3 ro = vec3(0.0, 0.0, 20.0);
  
  //vec2 mouse = iMouse.xy / iResolution.xy;
  float a=iTime*0.25;
  
  //ro = rotateX(ro, -0.8); // up view
  //ro.z += 10.;
  
  #if rotate_mode == 1
  ro = rotateY(ro, a);
  rd = rotateY(rd, a);
  #endif
  
  #if rotate_mode == 2
  ro = rotateX(rotateY(ro, a), a);
  rd = rotateX(rotateY(rd, a), a);
  #endif

  #if rotate_mode == 3
  float time_synchro = 3. * M_PI / 2. + iTime;
  float sin_var = max(0., min(0.8, 1.5 * (0.45 + 0.55 * sin(M_PI + time_synchro))));
  
    
  ro = rotateZ(ro, 3.9 * sin_var);
  rd = rotateZ(rd, 3.9 * sin_var);
  #endif
    
  // Trace ray
  bool hit;

  // Number of steps
  int s;
  //float t = SphereTrace(ro, rd, hit,s);
  float t = EnhancedSphereTrace(ro, rd, hit,s, 1.2);
  vec3 pos=ro+t*rd;
    
  // Shade background
  vec3 rgb = background(rd);

  if (hit)
  {
    // Compute normal
    vec3 n = ObjectNormal(pos);

    // Shade object with light
    rgb = Shade(pos, n);
  }

  // Uncomment this line to shade image with false colors representing the number of steps
  rgb += ShadeSteps(s);

  fragColor=vec4(rgb, 1.0);
}
